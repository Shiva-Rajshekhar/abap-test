*&---------------------------------------------------------------------*
*& Report ZTMT_PO_DETAILS
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ztmt_po_details.

TYPE-POOLS slis.
TABLES:ekko,ekpo.

TYPES:BEGIN OF ty_cond,
        knumv TYPE prcd_elements-knumv,
        kposn TYPE prcd_elements-kposn,
        stunr TYPE prcd_elements-stunr,
        zaehk TYPE prcd_elements-zaehk,
        kschl TYPE prcd_elements-kschl,
        waers TYPE prcd_elements-waers,
        lifnr TYPE prcd_elements-lifnr,
        kwert TYPE prcd_elements-kwert,
      END OF ty_cond.


TYPES:BEGIN OF ty_ekbe,
        ebeln TYPE ekbe-ebeln,
        ebelp TYPE ekbe-ebelp,
        zekkn TYPE ekbe-zekkn,
        vgabe TYPE ekbe-vgabe,
        gjahr TYPE ekbe-gjahr,
        belnr TYPE ekbe-belnr,
        buzei TYPE ekbe-buzei,
        bwart TYPE ekbe-bwart,
        budat TYPE ekbe-budat,
        menge TYPE ekbe-menge,
        shkzg TYPE ekbe-shkzg,
        elikz TYPE ekbe-elikz,
      END OF ty_ekbe.

TYPES:BEGIN OF ty_podata,
        ebeln     TYPE ekko-ebeln,
        ebelp     TYPE ekpo-ebelp,
        bukrs     TYPE ekko-bukrs,
        bsart     TYPE ekko-bsart,
        lifnr     TYPE ekko-lifnr,
        ekorg     TYPE ekko-ekorg,
        ekgrp     TYPE ekko-ekgrp,
        waers     TYPE ekko-waers,
        bedat     TYPE ekko-bedat,
        reswk     TYPE ekko-reswk,
        knumv     TYPE ekko-knumv,
        wkurs     TYPE ekko-wkurs,
        matnr     TYPE ekpo-matnr,
        werks     TYPE ekpo-werks,
        matkl     TYPE ekpo-matkl,
        menge     TYPE ekpo-menge,
        meins     TYPE ekpo-meins,
        netpr     TYPE ekpo-netpr,
        netwr     TYPE ekpo-netwr,
        effwr     TYPE ekpo-effwr,
        retpo     TYPE ekpo-retpo,
        inco1     TYPE inco1,
        inco1_d   TYPE bezei30,
        inco1_loc TYPE inco2,
      END OF ty_podata.

TYPES:BEGIN OF ty_pdesc,
        werks	TYPE werks_d,
        name1	TYPE name1,
      END OF ty_pdesc.

DATA:gt_podata TYPE TABLE OF ty_podata,
     wa_podata TYPE ty_podata.

DATA:gt_cond TYPE TABLE OF ty_cond,
     wa_cond TYPE ty_cond.

DATA:gt_ekbe TYPE TABLE OF ty_ekbe,
     wa_ekbe TYPE ty_ekbe.

DATA:gt_ekbe_dis TYPE TABLE OF ty_ekbe,
     wa_ekbe_dis TYPE ty_ekbe.

DATA:gt_t685t TYPE TABLE OF t685t,
     wa_t685t TYPE t685t.

DATA:gt_cond_tmp TYPE TABLE OF ty_cond.

DATA:lt_sdesc TYPE TABLE OF ty_pdesc,
     wa_sdesc TYPE ty_pdesc.

DATA:lt_pdesc TYPE TABLE OF ty_pdesc,
     wa_pdesc TYPE ty_pdesc.

DATA:lt_t161t TYPE TABLE OF t161t,
     wa_t161t TYPE t161t.

DATA:gt_t001 TYPE TABLE OF t001,
     wa_t001 TYPE t001.

DATA:lt_lfa1 TYPE TABLE OF lfa1,
     wa_lfa1 TYPE lfa1.

DATA:lt_makt TYPE TABLE OF makt,
     wa_makt TYPE makt.

DATA:lv_curr_out TYPE bapicurr-bapicurr,
     lv_curr     TYPE tcurc-waers.
FIELD-SYMBOLS: <t_dyntable>  TYPE STANDARD TABLE,
               <fs_dyntable>,
               <fs_fldval>   TYPE any,
               <fs_fldval1>  TYPE any,
               <fs_fldval2>  TYPE any.
DATA: t_newtable   TYPE REF TO data,
      t_newline    TYPE REF TO data,
      t_fldcat     TYPE lvc_t_fcat,
      wa_it_fldcat TYPE lvc_s_fcat,
      wa_colno(2)  TYPE n,
      wa_flname(5) TYPE c.

DATA:fs_fldcat TYPE slis_t_fieldcat_alv.
DATA: wa_cat LIKE LINE OF fs_fldcat.

DATA:fs_fldcat_h TYPE slis_t_fieldcat_alv.
DATA: wa_cat_h LIKE LINE OF fs_fldcat.


DATA:lv_fname TYPE lvc_fname,
     lv_desc  TYPE  lvc_txtcol.
DATA:lt_t001w TYPE TABLE OF t001w,
     wa_t001w TYPE t001w.

DATA:r_werks  TYPE RANGE OF vbrp-werks,
     wr_werks LIKE LINE OF r_werks.

SELECTION-SCREEN:BEGIN OF BLOCK b1 WITH FRAME TITLE TEXT-001.
  SELECT-OPTIONS:s_ebeln FOR ekko-ebeln,
                 s_lifnr FOR ekko-lifnr,
                 s_reswk FOR ekko-reswk,
                 s_matnr FOR ekpo-matnr,
                 s_werks FOR ekpo-werks DEFAULT '1010' OBLIGATORY,
                 s_matkl FOR ekpo-matkl,
                 s_bedat FOR ekko-bedat OBLIGATORY.
SELECTION-SCREEN:END OF BLOCK b1.
SELECTION-SCREEN:BEGIN OF BLOCK b2 WITH FRAME TITLE TEXT-002.
  PARAMETERS: p_lout LIKE disvariant-variant.
SELECTION-SCREEN:END OF BLOCK b2.

INITIALIZATION.
  DATA:lw_var TYPE disvariant.
  lw_var-report = sy-repid.
***USERNAME
  CALL FUNCTION 'REUSE_ALV_VARIANT_DEFAULT_GET'
* EXPORTING
*   I_SAVE              = ' '
    CHANGING
      cs_variant    = lw_var
    EXCEPTIONS
      wrong_input   = 1
      not_found     = 2
      program_error = 3
      OTHERS        = 4.
  IF sy-subrc <> 0.
* Implement suitable error handling here
  ENDIF.
  p_lout = lw_var-variant.

AT SELECTION-SCREEN.

  PERFORM auth_check_plant.

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_lout.

  PERFORM fetch_layout.

START-OF-SELECTION.

  REFRESH:r_werks[].
  CLEAR:wr_werks.

  LOOP AT lt_t001w INTO wa_t001w.

    wr_werks-sign = 'I'.
    wr_werks-option = 'EQ'.
    wr_werks-low = wa_t001w-werks.
    APPEND wr_werks TO r_werks.

  ENDLOOP.

  SELECT  head~ebeln
          item~ebelp
          head~bukrs
          head~bsart
          head~lifnr
          head~ekorg
          head~ekgrp
          head~waers
          head~bedat
          head~reswk
          head~knumv
          head~wkurs
          item~matnr
          item~werks
          item~matkl
          item~menge
          item~meins
          item~netpr
          item~netwr
          item~effwr
          item~retpo
          head~inco1
          head~inco2
          inco1_text~bezei
          FROM ekko AS head INNER JOIN ekpo AS item
                 ON  head~ebeln = item~ebeln
          LEFT OUTER JOIN tinct AS inco1_text
            ON inco1_text~inco1 = head~inco1
           AND inco1_text~spras = 'E'
                 INTO TABLE gt_podata
                 WHERE  head~ebeln IN s_ebeln
                   AND  head~lifnr IN s_lifnr
                   AND   head~reswk IN s_reswk
                   AND  item~matnr IN s_matnr
                   AND item~werks IN r_werks
                   AND item~matkl IN s_matkl
                   AND head~bedat IN s_bedat
  AND item~loekz = space.


  IF gt_podata[] IS NOT INITIAL.
    REFRESH:lt_t161t[].

    SELECT * FROM t161t INTO TABLE lt_t161t FOR ALL ENTRIES IN gt_podata WHERE  spras = 'EN'
                                                                         AND bsart = gt_podata-bsart
    AND bstyp = 'F'.

    SELECT werks
    name1 FROM t001w INTO TABLE lt_sdesc.

    SELECT * FROM makt INTO TABLE lt_makt FOR ALL ENTRIES IN
                          gt_podata WHERE matnr = gt_podata-matnr
    AND spras = 'EN'.
    SELECT * FROM lfa1 INTO TABLE lt_lfa1 FOR ALL ENTRIES IN gt_podata WHERE lifnr = gt_podata-lifnr.
    SELECT knumv
           kposn
           stunr
           zaehk
           kschl
           waers
           lifnr
           kwert FROM prcd_elements
                 INTO TABLE gt_cond
                 FOR ALL ENTRIES IN gt_podata WHERE knumv = gt_podata-knumv
    AND kinak EQ space.
***                                            and KSTAT = space.
    SELECT * FROM t001 INTO TABLE gt_t001 FOR ALL ENTRIES IN gt_podata WHERE bukrs = gt_podata-bukrs.


    SELECT  ebeln
            ebelp
            zekkn
            vgabe
            gjahr
            belnr
            buzei
            bwart
            budat
            menge
            shkzg
            elikz FROM ekbe INTO TABLE gt_ekbe
                            FOR ALL ENTRIES IN gt_podata
                            WHERE ebeln = gt_podata-ebeln
                              AND ebelp = gt_podata-ebelp
    AND vgabe = '1'.



    gt_cond_tmp[] = gt_cond[].
    SORT gt_cond_tmp BY kschl.
    DELETE ADJACENT DUPLICATES FROM gt_cond_tmp COMPARING kschl.
    SELECT * FROM t685t INTO TABLE gt_t685t
                 FOR ALL ENTRIES IN gt_cond_tmp WHERE spras = 'EN'
                                                  AND kvewe = 'A'
                                                  AND kappl = 'M'
    AND kschl = gt_cond_tmp-kschl.
***T685T

    PERFORM create_fcatalogue USING 'EBELN' 'PO Number' 'CHAR' '10'.
    PERFORM create_fcatalogue USING 'EBELP' 'PO Item Number' 'NUMC' '5'.
    PERFORM create_fcatalogue USING 'BSART' 'Document Type' 'CHAR' '4'.
    PERFORM create_fcatalogue USING 'BATXT' 'Document Type Desc' 'CHAR' '20'.

    PERFORM create_fcatalogue USING 'LIFNR' 'PO Vendor' 'CHAR' '10'.
    PERFORM create_fcatalogue USING 'NAME1' 'PO Vendor Desc' 'CHAR' '35'.
    PERFORM create_fcatalogue USING 'RESWK' 'Supplying Plnat' 'CHAR' '4'.
    PERFORM create_fcatalogue USING 'DRESWK' 'Supplying Plant Desc' 'CHAR' '30'.

    PERFORM create_fcatalogue USING 'SORTL' 'Search Tearm' 'CHAR' '10'.

    PERFORM create_fcatalogue USING 'EKORG' 'Purchasing organization' 'CHAR' '4'.
    PERFORM create_fcatalogue USING 'EKGRP' 'Purchasing Group' 'CHAR' '3'.
    PERFORM create_fcatalogue USING 'WAERS' 'Currency' 'CUKY' '5'.
    PERFORM create_fcatalogue USING 'BEDAT' 'Document Date' 'DATS' '8'.
    PERFORM create_fcatalogue USING 'MATNR' 'Material Number' 'CHAR' '40'.
    PERFORM create_fcatalogue USING 'MAKTX' 'Material Descripption' 'CHAR' '40'.
    PERFORM create_fcatalogue USING 'WERKS' 'Plant' 'CHAR' '40'.
    PERFORM create_fcatalogue USING 'DWERKS' 'Plant Desc' 'CHAR' '30'.

    PERFORM create_fcatalogue USING 'MATKL' 'Material Group' 'CHAR' '9'.
    PERFORM create_fcatalogue USING 'MENGE' 'Order Quantity' 'QUAN' '17'.
    PERFORM create_fcatalogue USING 'MEINS' 'UOM' 'UNIT' '3'.
    PERFORM create_fcatalogue USING 'BUDAT' 'GR Date' 'DATS' '8'.
    PERFORM create_fcatalogue USING 'RMENGE' 'GR Quantity' 'QUAN' '17'.
    LOOP AT gt_cond_tmp INTO wa_cond.
      CLEAR:wa_t685t.
      READ TABLE gt_t685t INTO wa_t685t WITH KEY spras = 'EN'
                                                 kvewe = 'A'
                                                 kappl = 'M'
                                                 kschl = wa_cond-kschl.
      lv_fname = wa_cond-kschl.
***     lv_desc  = wa_cond-kschl.
      lv_desc  = wa_t685t-vtext.
      PERFORM create_fcatalogue USING lv_fname  lv_desc 'CURR' '16'.
    ENDLOOP.
    PERFORM create_fcatalogue USING 'NETWR' 'Net PO Value' 'CURR' '16'.
    PERFORM create_fcatalogue USING 'UNETWR' 'Unit Purchase Price' 'CURR' '16'.
    PERFORM create_fcatalogue USING 'ULNETWR' 'Unit Purchase Price(LC)' 'CURR' '16'.


    PERFORM create_fcatalogue USING 'EFFWR' 'Landed Cost' 'CURR' '16'.
    PERFORM create_fcatalogue USING 'UEFFWR' 'Unit Landed Cost' 'CURR' '16'.
***PERFORM create_fcatalogue using 'UEFFWR' 'DPLC/Unit' 'CURR' '16'.


    PERFORM create_fcatalogue USING 'LEFFWR' 'Landed Cost in Local' 'CURR' '16'.
***PERFORM create_fcatalogue using 'ULEFFWR' 'Unit Loc. Landed Cost' 'CURR' '16'.
    PERFORM create_fcatalogue USING 'ULEFFWR' 'DPLC/Unit' 'CURR' '16'.

    PERFORM create_fcatalogue USING 'LCFACT' 'LC Factor' 'DEC' '8'.

    PERFORM create_fcatalogue USING 'LWAERS' 'Local Currency' 'CUKY' '5'.
    PERFORM create_fcatalogue USING 'WKURS' 'Exchange Rate' '' '16'.
    PERFORM create_fcatalogue USING 'INCO1' 'Incoterm1' 'CHAR' '16'.
    PERFORM create_fcatalogue USING 'INCO1_D' 'Incoterm1 Description' 'CHAR' '16'.
    PERFORM create_fcatalogue USING 'INCO1_LOC' 'Incoterm1 Location' '' '16'.



    PERFORM create_dynamic_table.
    DATA:lv_posn TYPE prcd_elements-kposn.
    DATA:lv_effwr TYPE ekpo-effwr.
    SORT gt_cond BY knumv.
    LOOP AT gt_podata INTO wa_podata.
      CLEAR:wa_t001,wa_lfa1,wa_makt.

      UNASSIGN <fs_fldval>.
      CLEAR:wa_podata-effwr.
      lv_posn = wa_podata-ebelp.
      LOOP AT gt_cond INTO wa_cond WHERE knumv = wa_podata-knumv
                                       AND kposn = lv_posn.

        IF wa_cond-kschl NE 'MWVS'.
          wa_podata-effwr = wa_podata-effwr + wa_cond-kwert.
        ENDIF.
        ASSIGN COMPONENT wa_cond-kschl OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
        IF sy-subrc = 0.
          IF wa_podata-retpo = 'X'.
            wa_cond-kwert = wa_cond-kwert * -1.
          ENDIF.
***  <fs_fldval> = wa_cond-KWERT.
          <fs_fldval> = <fs_fldval> + wa_cond-kwert.
        ENDIF.
      ENDLOOP.

      IF wa_podata-retpo = 'X'.
        wa_podata-effwr = wa_podata-effwr * -1.
        wa_podata-netpr = wa_podata-netpr * -1.
        wa_podata-netwr = wa_podata-netwr * -1.
      ENDIF.
      READ TABLE gt_t001 INTO wa_t001 WITH KEY bukrs = wa_podata-bukrs.
      READ TABLE lt_lfa1 INTO wa_lfa1 WITH KEY lifnr = wa_podata-lifnr.
      READ TABLE lt_makt INTO wa_makt WITH KEY matnr = wa_podata-matnr.
      MOVE-CORRESPONDING wa_podata TO <fs_dyntable>.

      READ TABLE lt_t161t INTO wa_t161t WITH KEY  spras = 'EN'
                                                  bsart = wa_podata-bsart
                                                  bstyp = 'F'.

      ASSIGN COMPONENT 'BATXT' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_t161t-batxt.
      ENDIF.




      ASSIGN COMPONENT 'NAME1' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_lfa1-name1.
      ENDIF.

      ASSIGN COMPONENT 'SORTL' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_lfa1-sortl.
      ENDIF.

      CLEAR: wa_sdesc.
      READ TABLE lt_sdesc INTO wa_sdesc WITH KEY werks = wa_podata-reswk.
      ASSIGN COMPONENT 'DRESWK' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_sdesc-name1.
      ENDIF.


      CLEAR: wa_sdesc.
      READ TABLE lt_sdesc INTO wa_sdesc WITH KEY werks = wa_podata-werks.
      ASSIGN COMPONENT 'DWERKS' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_sdesc-name1.
      ENDIF.


      ASSIGN COMPONENT 'MAKTX' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_makt-maktx.
      ENDIF.
***  wa_podata-WKURS
      ASSIGN COMPONENT 'RMENGE' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      CLEAR:wa_ekbe.
      LOOP AT gt_ekbe INTO wa_ekbe WHERE ebeln = wa_podata-ebeln
                                AND ebelp = wa_podata-ebelp.
        IF wa_ekbe-shkzg = 'H'.
          wa_ekbe-menge = wa_ekbe-menge * -1.
        ENDIF.

        IF <fs_fldval> IS ASSIGNED.
          <fs_fldval> = <fs_fldval> + wa_ekbe-menge.
        ENDIF.
      ENDLOOP.
      UNASSIGN <fs_fldval>.

      ASSIGN COMPONENT 'BUDAT' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      IF sy-subrc = 0.
        <fs_fldval> = wa_ekbe-budat.
      ENDIF.
      UNASSIGN <fs_fldval>.
      ASSIGN COMPONENT 'LEFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.

      CLEAR:lv_curr_out,lv_curr.
      lv_curr = wa_podata-waers.
      CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_EXTERNAL'
        EXPORTING
          currency        = lv_curr
          amount_internal = wa_podata-effwr
        IMPORTING
          amount_external = lv_curr_out.

      <fs_fldval> =  lv_curr_out * wa_podata-wkurs.


      UNASSIGN <fs_fldval>.

      ASSIGN COMPONENT 'LWAERS' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
      <fs_fldval> = wa_t001-waers.

***  UNASSIGN <fs_fldval>.
***
***  loop at gt_cond into wa_cond where knumv = wa_podata-knumv
***                                   and kposn = lv_posn.
***  ASSIGN COMPONENT wa_cond-kschl of STRUCTURE <fs_dyntable> to <fs_fldval>.
***  if sy-subrc = 0.
***  if wa_podata-retpo = 'X'.
***  wa_cond-KWERT = wa_cond-KWERT * -1.
***  endif.
***  <fs_fldval> = wa_cond-KWERT.
***  endif.
***  endloop.

      IF wa_podata-menge IS NOT INITIAL.

        ASSIGN COMPONENT 'UNETWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
        IF sy-subrc = 0.
          <fs_fldval> = wa_podata-netwr / wa_podata-menge.
          UNASSIGN <fs_fldval>.
        ENDIF.

        ASSIGN COMPONENT 'ULNETWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
        IF sy-subrc = 0.

          CLEAR:lv_curr_out,lv_curr.
          lv_curr = wa_podata-waers.
          CALL FUNCTION 'BAPI_CURRENCY_CONV_TO_EXTERNAL'
            EXPORTING
              currency        = lv_curr
              amount_internal = wa_podata-netwr
            IMPORTING
              amount_external = lv_curr_out.


          <fs_fldval> = ( lv_curr_out / wa_podata-menge ) * wa_podata-wkurs.
          UNASSIGN <fs_fldval>.
        ENDIF.


***ULNETWR = UNETWR * WKURS
***LCFACT = ULEFFWR/ULNETWR.


        ASSIGN COMPONENT 'EFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval1>.
        IF sy-subrc = 0.
          ASSIGN COMPONENT 'UEFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
          <fs_fldval> = <fs_fldval1> / wa_podata-menge.
          UNASSIGN <fs_fldval>.
          UNASSIGN <fs_fldval1>.
        ENDIF.

        ASSIGN COMPONENT 'LEFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval1>.
        IF sy-subrc = 0.
          ASSIGN COMPONENT 'ULEFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
          <fs_fldval> = <fs_fldval1> / wa_podata-menge.
          UNASSIGN <fs_fldval>.
          UNASSIGN <fs_fldval1>.
        ENDIF.


        ASSIGN COMPONENT 'ULEFFWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval1>.
        IF sy-subrc = 0.
          ASSIGN COMPONENT 'ULNETWR' OF STRUCTURE <fs_dyntable> TO <fs_fldval2>.
          IF sy-subrc = 0.
            ASSIGN COMPONENT 'LCFACT' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
            IF sy-subrc = 0 AND <fs_fldval2> IS NOT INITIAL.
              <fs_fldval> = <fs_fldval1> / <fs_fldval2>.
              UNASSIGN <fs_fldval>.
              UNASSIGN <fs_fldval1>.
              UNASSIGN <fs_fldval2>.
            ENDIF.
          ENDIF.
        ENDIF.



      ENDIF.
      APPEND <fs_dyntable> TO <t_dyntable>.
      CLEAR:<fs_dyntable>.
    ENDLOOP.
***BREAK-POINT.
    PERFORM fieldcatalog_history.
    DATA:wa_layout TYPE slis_layout_alv.
    wa_layout-colwidth_optimize = 'X'.

    DATA : lw_variant TYPE disvariant.
    lw_variant-report = sy-repid.
    lw_variant-username = sy-uname.
    lw_variant-variant = p_lout.

    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program      = sy-repid
        i_callback_user_command = 'USER_COMMAND'
        is_layout               = wa_layout
        it_fieldcat             = fs_fldcat
        i_save                  = 'A' "To save Layout
        is_variant              = lw_variant
      TABLES
        t_outtab                = <t_dyntable>.

  ELSE.
    MESSAGE 'No Data Selected' TYPE 'I'.
  ENDIF.

END-OF-SELECTION.
*&---------------------------------------------------------------------*
*& Form CREATE_FCATALOGUE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
FORM create_fcatalogue  USING  p_name  TYPE lvc_fname
                               p_desc  TYPE lvc_txtcol
                               p_type TYPE char10
                               p_len TYPE intlen.

  CLEAR:wa_it_fldcat.
  wa_it_fldcat-fieldname = p_name.
  wa_it_fldcat-coltext = p_desc.
  wa_it_fldcat-datatype = p_type.
  wa_it_fldcat-intlen = p_len.
  IF p_type EQ 'QUAN' OR p_type EQ 'DEC'.
    wa_it_fldcat-decimals = 3.
  ELSEIF p_type EQ 'CURR'.
    wa_it_fldcat-decimals = 2.
  ENDIF.

  APPEND wa_it_fldcat TO t_fldcat.

  CLEAR:wa_cat.
  wa_cat-fieldname = p_name.
  IF p_name EQ 'MATNR'.
    wa_cat-no_zero = 'X'.
    wa_cat-ref_tabname = 'MARA'.
    wa_cat-ref_fieldname = 'MATNR'.
  ENDIF.

  IF p_type EQ 'QUAN'.
    wa_cat-qfieldname = 'MEINS'.
  ELSEIF p_type EQ 'CURR'.
    IF p_name = 'LEFFWR' OR p_name = 'ULEFFWR' OR p_name = 'ULNETWR'.
      wa_cat-cfieldname = 'LWAERS'.
    ELSE.
      wa_cat-cfieldname = 'WAERS'.
    ENDIF.
  ELSEIF p_type EQ 'UNIT'.
    wa_cat-ref_fieldname = 'MEINS'.
    wa_cat-ref_tabname = 'EKPO'.
  ENDIF.

  IF p_name = 'EBELN' OR p_name = 'RMENGE'.
    wa_cat-emphasize = 'X'.
    wa_cat-hotspot = 'X'.

  ENDIF.

  wa_cat-seltext_l = p_desc.
***  wa_cat-outputlen = ''.
  APPEND wa_cat TO fs_fldcat.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form CREATE_DYNAMIC_TABLE
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM create_dynamic_table .
  CLEAR:t_newtable.
  UNASSIGN:<t_dyntable>.
  CALL METHOD cl_alv_table_create=>create_dynamic_table
    EXPORTING
      it_fieldcatalog = t_fldcat
    IMPORTING
      ep_table        = t_newtable.

  ASSIGN t_newtable->* TO <t_dyntable>.

  CREATE DATA t_newline LIKE LINE OF <t_dyntable>.
  ASSIGN t_newline->* TO <fs_dyntable>.

ENDFORM.

FORM user_command USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
  DATA:lv_ebeln TYPE ekko-ebeln.
  DATA:lv_ebelp TYPE ekpo-ebelp.
  CLEAR:lv_ebeln.
  CASE r_ucomm.
    WHEN '&IC1'.
      READ TABLE <t_dyntable> INTO <fs_dyntable> INDEX  rs_selfield-tabindex.
      IF sy-subrc = 0.
        ASSIGN COMPONENT 'EBELN' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
        lv_ebeln = <fs_fldval>.
        ASSIGN COMPONENT 'EBELP' OF STRUCTURE <fs_dyntable> TO <fs_fldval>.
        lv_ebelp = <fs_fldval>.
      ENDIF.

      IF rs_selfield-fieldname = 'EBELN'.
        SET PARAMETER ID 'BES' FIELD lv_ebeln.
        CALL TRANSACTION 'ME23N' AND SKIP FIRST SCREEN.
      ELSEIF rs_selfield-fieldname = 'RMENGE'.
        PERFORM display_history_gr USING lv_ebeln lv_ebelp.

      ENDIF.
  ENDCASE.
ENDFORM.                    "user_command
*&---------------------------------------------------------------------*
*& Form FIELDCATALOG_HISTORY
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fieldcatalog_history .

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'GJAHR'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'GJAHR'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'BELNR'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'BELNR'.
  wa_cat_h-ref_tabname = 'EKBE'.
  wa_cat_h-emphasize = 'X'.
  wa_cat_h-hotspot = 'X'.
  APPEND wa_cat_h TO fs_fldcat_h.

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'BUZEI'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'BUZEI'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'BWART'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'BWART'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'BUDAT'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'BUDAT'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.


  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'MENGE'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'MENGE'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.

  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'SHKZG'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'SHKZG'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.


  CLEAR:wa_cat_h.
  wa_cat_h-fieldname = 'ELIKZ'.
  wa_cat_h-tabname = 'GT_EKBE'.
  wa_cat_h-ref_fieldname = 'ELIKZ'.
  wa_cat_h-ref_tabname = 'EKBE'.
  APPEND wa_cat_h TO fs_fldcat_h.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form DISPLAY_HISTORY_GR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM display_history_gr USING p_ebeln  TYPE ekko-ebeln
                              p_ebelp  TYPE ekpo-ebelp.
  gt_ekbe_dis[] = gt_ekbe[].
  DELETE gt_ekbe_dis WHERE ebeln NE p_ebeln.
  DELETE gt_ekbe_dis WHERE ebelp NE p_ebelp.

  IF gt_ekbe_dis[] IS NOT INITIAL.

    DATA : lw_variant TYPE disvariant.
    CLEAR :lw_variant.
    CALL FUNCTION 'REUSE_ALV_GRID_DISPLAY'
      EXPORTING
        i_callback_program = sy-repid
***      i_callback_user_command = 'USER_COMMAND'
        is_layout          = wa_layout
        it_fieldcat        = fs_fldcat_h
        i_save             = 'A' "To save Layout
        is_variant         = lw_variant
      TABLES
        t_outtab           = gt_ekbe_dis.

  ELSE.
  ENDIF.


ENDFORM.
*&---------------------------------------------------------------------*
*& Form AUTH_CHECK_PLANT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM auth_check_plant .
  DATA:lv_msg(255).
  CLEAR:lv_msg.
  DATA:lv_plant.
  CLEAR:lv_plant.

  SELECT * FROM t001w INTO TABLE lt_t001w WHERE werks IN s_werks.

  LOOP AT lt_t001w INTO wa_t001w.

    AUTHORITY-CHECK OBJECT 'M_BEST_WRK'
    ID 'ACTVT' FIELD '03'
    ID 'WERKS' FIELD wa_t001w-werks.

    IF sy-subrc NE 0.
      lv_plant = 'X'.
      DELETE TABLE lt_t001w FROM wa_t001w.
    ENDIF.
  ENDLOOP.

  IF lv_plant = 'X'.

    MESSAGE | Unauthorised Plant data removed   | TYPE 'I'.

  ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form FETCH_LAYOUT
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM fetch_layout .
  DATA: variante        TYPE disvariant,
        variante_flat   TYPE  disvariant,
        def_variante    TYPE  disvariant,
        def_variante_f4 TYPE  disvariant,
        variant_exit(1) TYPE  c.

  def_variante_f4-report = sy-repid.
  CALL FUNCTION 'REUSE_ALV_VARIANT_F4'
    EXPORTING
      is_variant = def_variante_f4
      i_save     = 'A'
    IMPORTING
      e_exit     = variant_exit
      es_variant = def_variante
    EXCEPTIONS
      not_found  = 2.


  p_lout = def_variante-variant.
ENDFORM.
